name: Deploy

on:
  push:
    branches:
      - prod
      - stage

jobs:
  build-frontends:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        frontendName:
          - dashboard
          - editor

    steps:
    - name: Create variables
      id: vars
      run: |
          branch=${GITHUB_REF##*/} 
          echo "::set-output name=branch::${branch}"

    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - run: npm ci && npm run build
      working-directory: frontend/${{ matrix.frontendName }}
      env:
        BRANCH: ${{ steps.vars.outputs.branch }}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.frontendName }}
        path: frontend/public/${{ matrix.frontendName }}

  deploy-frontend:
    needs: [build-frontends]
    runs-on: ubuntu-latest

    steps:
    - name: Create variables
      id: vars
      run: |
          branch=${GITHUB_REF##*/} 
          echo "::set-output name=branch::${branch}"
    
    - uses: actions/checkout@v2
    - run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout --orphan ${{ steps.vars.outputs.branch }}-deployed-frontend
        git reset --hard
        git checkout ${{ steps.vars.outputs.branch }} -- frontend/public
        mv frontend/public/* .
        rm -r frontend
        git rm -r --cached frontend
    - uses: actions/download-artifact@v2
      with:
        name: editor
        path: editor
    - uses: actions/download-artifact@v2
      with:
        name: dashboard
        path: dashboard
    - run: |
        git add .
        git commit -m "Update hosted version"
    - uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        force: true
        branch: ${{ steps.vars.outputs.branch }}-deployed-frontend

  build-utils:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - run: npm ci && npm run build
      working-directory: functions/utils
    - uses: actions/upload-artifact@v2
      with:
        name: utils
        path: |
          functions/utils/dist
          functions/utils/package-lock.json

  build-functions:
    needs: [build-utils]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        functionName:
          - adjust
          - align
          - charge_credit
          - fetch
          - patch
          - signup
          - transcode_envelope
          - transcribe
          - transcription_watcher
          - upload
          - upload_watcher

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14'
    - uses: actions/download-artifact@v2
      with:
        name: utils
        path: functions/master/utils
    - run: npm i -g dry-dry
    - run: dry ci && dry run build && mv dist/package.json package.json
      working-directory: functions/${{ matrix.functionName }}
    - run: cp ${{ matrix.functionName }} master/code
      working-directory: functions
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.functionName }}
        path: functions/master

  deploy-backend:
    needs: [build-functions]
    runs-on: ubuntu-latest

    steps:
    - name: Create variables
      id: vars
      run: |
          branch=${GITHUB_REF##*/} 
          echo "::set-output name=branch::${branch}"
          echo "::set-output name=creds::${branch^^}_GOOGLE_CREDENTIALS"

    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        path: terraform/functions
    - uses: hashicorp/setup-terraform@v1
    - run: terraform init && terraform apply -auto-approve
      working-directory: terraform/${{ steps.vars.outputs.branch }}
      env:
        GOOGLE_CREDENTIALS: ${{ secrets[steps.vars.outputs.creds] }}
