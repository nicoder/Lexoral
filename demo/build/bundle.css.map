{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">\"use strict\";\nlet allOptionsStr = \"\";\nlet allOptions;\n$: allOptions = allOptionsStr.length === 0 ? [] : allOptionsStr.trim().split(\"\\n\").map(line => JSON.parse(line));\nlet currentLineOptions;\n$: currentLineOptions = allOptions.length > chosenOptions.length ? allOptions[chosenOptions.length] : [];\nlet currentSectionOptions;\n$: currentSectionOptions = currentLineOptions.length > currentLineChosenOptions.length ? currentLineOptions[currentLineChosenOptions.length] : [];\nlet chosenOptions = [];\nlet currentLineChosenOptions = [];\nlet nextSectionNewLine;\n$: nextSectionNewLine = currentLineOptions.length === currentLineChosenOptions.length + 1;\nlet nextSectionLineOptions;\n$: nextSectionLineOptions = nextSectionNewLine ? allOptions[chosenOptions.length + 1] || [] : allOptions[chosenOptions.length] || [];\nlet nextSectionOptions;\n$: nextSectionOptions = nextSectionNewLine ? nextSectionLineOptions[0] || [] : nextSectionLineOptions[currentLineChosenOptions.length + 1] || [];\nsetInterval(() => {\n    const epoch = new Date().getTime();\n    localStorage.setItem(\"transcript-\" + epoch, JSON.stringify(chosenOptions));\n    console.log(\"Autosaved\", epoch);\n}, 60 * 1000);\nfunction choose(option) {\n    currentLineChosenOptions = [...currentLineChosenOptions, option];\n    if (currentLineOptions.length === currentLineChosenOptions.length) {\n        chosenOptions = [...chosenOptions, currentLineChosenOptions];\n        currentLineChosenOptions = [];\n    }\n    hovered = null;\n}\n$: if (hovered === null && currentSectionOptions.length) {\n    hovered = 0;\n    text = currentSectionOptions[hovered];\n}\nfunction back() {\n    if (currentLineChosenOptions.length) {\n        currentLineChosenOptions = currentLineChosenOptions.slice(0, currentLineChosenOptions.length - 1);\n    }\n    else {\n        currentLineChosenOptions = chosenOptions[chosenOptions.length - 1];\n        currentLineChosenOptions = currentLineChosenOptions.slice(0, currentLineChosenOptions.length - 1);\n        chosenOptions = chosenOptions.slice(0, chosenOptions.length - 1);\n    }\n    hovered = null;\n}\nlet text = \"\";\nlet hovered = null;\nfunction keypress(event) {\n    if (event.key === \"Enter\") {\n        choose(text);\n    }\n    else if (event.key === \"Escape\") {\n        back();\n    }\n    else if (event.key === \"ArrowDown\") {\n        hovered = ((hovered || 0) + 1) % currentSectionOptions.length;\n        text = currentSectionOptions[hovered];\n    }\n    else if (event.key === \"ArrowUp\") {\n        hovered = (currentSectionOptions.length + (hovered || 0) - 1) % currentSectionOptions.length;\n        text = currentSectionOptions[hovered];\n    }\n}\n</script>\n\n<style>\n.buttons {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.hovered {\n  background-color: yellow;\n}\n\ntextarea {\n  height: 100vh;\n  width: 100vw;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n}\n\nspan {\n  border: 1px solid black;\n  padding: 2px;\n  margin-top: 6px;\n}\n\ninput {\n  width: 100%\n}\n</style>\n\n<svelte:body on:keydown={event => keypress(event)}/>\n\n{#if !allOptionsStr.length}\n  <textarea type=\"text\" placeholder=\"paste into me daddy\" bind:value={allOptionsStr}/>\n{/if}\n\n{#each chosenOptions as line}\n  <p>\n    {#each line as part}\n      <span>{part} </span>\n    {/each}\n  </p>\n{/each}\n\n{#if allOptions.length === chosenOptions.length}\n  <p>\n    All done!\n  </p>\n\n  {#each chosenOptions as line}\n    <p>\n      {line.join(\" \")}\n    </p>\n  {/each}\n{:else}\n  <p>\n    {#each currentLineChosenOptions as part}\n      <span>{part}</span>\n    {/each}\n  </p>\n\n\n  <div class=\"buttons\">\n    {#if currentSectionOptions !== null}\n      {#each currentSectionOptions as option, idx}\n        <button class:hovered={hovered === idx} on:click={() => choose(option)}>{option}</button>\n      {/each}\n    {/if}\n  </div>\n\n  <input bind:value={text}/>\n  <button on:click={() => choose(text)}>Submit</button>\n  <button on:click={() => back()}>Back</button>\n\n  <p>Next:</p>\n  <ul>\n    {#each nextSectionOptions as option}\n      <li>{option}</li>\n    {/each}\n  </ul>\n  \n{/if}"
  ],
  "names": [],
  "mappings": "AAiEA,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,UAAU,AACzB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,gBAAgB,CAAE,MAAM,AAC1B,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,AACX,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI;AACb,CAAC"
}